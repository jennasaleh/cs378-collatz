        -:    0:Source:Collatz.c++
        -:    0:Graph:Collatz.gcno
        -:    0:Data:Collatz.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// ----------------------------
        -:    2:// projects/collatz/Collatz.c++
        -:    3:// Copyright (C) 2015
        -:    4:// Glenn P. Downing
        -:    5:// ----------------------------
        -:    6:
        -:    7:// --------
        -:    8:// includes
        -:    9:// --------
        -:   10:
        -:   11:#include <cassert>  // assert
        -:   12:#include <iostream> // endl, istream, ostream
        -:   13:#include <sstream>  // istringstream
        -:   14:#include <string>   // getline, string
        -:   15:#include <utility>  // make_pair, pair
        -:   16:#include <cmath>    // abs
        -:   17:
        -:   18:#include "Collatz.h"
        -:   19:
        -:   20:using namespace std;
        -:   21:
        -:   22:#define SIZE 50000
        -:   23:
        -:   24:// ------------
        -:   25:// collatz_read
        -:   26:// ------------
        -:   27:
function _Z12collatz_readRKSs called 12 returned 100% blocks executed 80%
       12:   28:pair<int, int> collatz_read (const string& s) {
       12:   29:    istringstream sin(s);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   30:    int i;
        -:   31:    int j;
       12:   32:    sin >> i >> j;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
       12:   33:    return make_pair(i, j);}
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        -:   34:
        -:   35:// ------------
        -:   36:// collatz_eval 
        -:   37:// ------------
        -:   38:
function _Z12collatz_evalii called 16 returned 100% blocks executed 88%
       16:   39:int collatz_eval (int i, int j) 
        -:   40:{
        -:   41:    // error checking and weird cases
       16:   42:    assert(i > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       16:   43:    assert(j > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   44:
       16:   45:    if( (i==1) & (j==1))
branch  0 taken 13% (fallthrough)
branch  1 taken 88%
        2:   46:        return 1;
        -:   47:
        -:   48:    int temp;
        -:   49:    int k;
        -:   50:    int currentcycle, maxcycle;
        -:   51:
       14:   52:    currentcycle = 1;
       14:   53:    maxcycle = 0;
        -:   54:
        -:   55:    // if second value is lower, switch values of i and j
       14:   56:    if(j < i)
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        -:   57:    {
        2:   58:        temp = i;
        2:   59:        i = j;
        2:   60:        j = temp;
        -:   61:    }
        -:   62:
        -:   63:
        -:   64:    /******************* CACHE *******************/
        -:   65:    #ifdef SIZE
       14:   66:    int cache[SIZE] = {0};
        -:   67:    #endif
        -:   68:
        -:   69:    /*******************************************************/
        -:   70:
     4852:   71:    while (i <= j) 
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   72:    {
        -:   73:        #ifdef SIZE
     4824:   74:        if((i < SIZE) && (cache[i] != 0))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   75:        {
    #####:   76:            return cache[i];
        -:   77:        }
        -:   78:        #endif
        -:   79:
     4824:   80:        k = i;
        -:   81:
   489036:   82:        while (k != 1)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   83:        {
   479388:   84:            if((k % 2) != 0)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:   85:            {
   158760:   86:                k = 3 * k + 1;
   158760:   87:                currentcycle++;
        -:   88:            }
        -:   89:            else 
        -:   90:            {
   320628:   91:                k = k / 2;
   320628:   92:                currentcycle++;                    
        -:   93:            } 
        -:   94:        }
        -:   95:
     4824:   96:        if(k == 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   97:        {   
     4824:   98:            if(currentcycle > maxcycle)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:   99:            {
       64:  100:                maxcycle = currentcycle; 
        -:  101:                #ifdef SIZE
       64:  102:                if(i < SIZE)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  103:                {
       64:  104:                    cache[i] = maxcycle;
        -:  105:                }
        -:  106:                #endif
        -:  107:            } 
        -:  108:        }     
     4824:  109:        currentcycle = 1;         
     4824:  110:        i++;  
        -:  111:    }
       14:  112:    return maxcycle;
        -:  113:}
        -:  114:
        -:  115:
        -:  116:// -------------
        -:  117:// collatz_print
        -:  118:// -------------
        -:  119:
function _Z13collatz_printRSoiii called 12 returned 100% blocks executed 100%
       12:  120:void collatz_print (ostream& w, int i, int j, int v) {
       12:  121:    w << i << " " << j << " " << v << endl;}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
        -:  122:
        -:  123:// -------------
        -:  124:// collatz_solve
        -:  125:// -------------
        -:  126:
function _Z13collatz_solveRSiRSo called 3 returned 100% blocks executed 80%
        3:  127:void collatz_solve (istream& r, ostream& w) {
        3:  128:    string s;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       14:  129:    while (getline(r, s)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 73%
branch  7 taken 27% (fallthrough)
        8:  130:        const pair<int, int> p = collatz_read(s);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        8:  131:        const int            i = p.first;
        8:  132:        const int            j = p.second;
        8:  133:        const int            v = collatz_eval(i, j);
call    0 returned 100%
function _GLOBAL__sub_I__Z12collatz_readRKSs called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
       14:  134:        collatz_print(w, i, j, v);}}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 never executed
